import React, { FC } from "react";
import Head from "next/head";
import styles from "../../styles/Home.module.css";
import { Footer } from "@components/Footer/Footer";
import { useQuery, dehydrate, QueryClient } from "react-query";

const getUsers = async () => {
  const res = await fetch(`https://jsonplaceholder.typicode.com/users`);
  const data = await res.json();

  return data;
};

const Home: FC<{ users: any[] }> = () => {
  const { data } = useQuery("users", getUsers);

  const userData = data?.find((user: any) => user);

  return (
    <div>
      <Head>
        <title>Futsal App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{userData?.name}</h1>

        <p className={styles.description}>{userData?.email}</p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>{userData?.website}</h2>
            <p>{userData?.company?.catchPhrase}</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>{userData?.website}</h2>
            <p>{userData?.company?.catchPhrase}</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>{userData?.website}</h2>
            <p>{userData?.company?.catchPhrase}</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>{userData?.website}</h2>
            <p>{userData?.company?.catchPhrase}</p>
          </a>
        </div>
      </main>

      <Footer />
    </div>
  );
};

export default Home;

export async function getStaticProps() {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery("users", getUsers);

  return {
    props: {
      dehydrate: dehydrate(queryClient),
    },
  };
}
